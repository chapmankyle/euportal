{"version":3,"sources":["landing.js","profile.js","App.js","serviceWorker.js","index.js"],"names":["Landing","React","Component","Profile","class","NavBar","Navbar","bg","variant","Brand","Collapse","Nav","className","pullRight","to","Form","inline","FormControl","type","placeholder","Button","exact","path","component","Header","rel","href","integrity","crossorigin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUASeA,E,iLAJP,OAAO,4C,GAFOC,IAAMC,WCUbC,G,uLARP,OACI,yBAAKC,MAAM,WACP,4C,GAJMH,IAAMC,YCgB5B,SAASG,IACP,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,qBACA,kBAACH,EAAA,EAAOI,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUC,WAAS,GAChC,kBAAC,IAAD,CAAST,MAAM,OAAOU,GAAG,KAAzB,QACA,kBAAC,IAAD,CAASV,MAAM,OAAOU,GAAG,YAAzB,aAGJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASP,UAAU,YACxD,kBAACQ,EAAA,EAAD,CAAQZ,QAAQ,gBAAhB,YAIJ,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,WAAWC,UAAWpB,KAKxC,SAASqB,IACP,OACE,6BACE,0BACEC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,eAMLC,M,iLA7CX,OACE,yBAAKjB,UAAU,OACb,kBAACY,EAAD,MACA,kBAACnB,EAAD,W,GALUJ,IAAMC,WCIJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"js/main.3df34bcc.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Landing extends React.Component {\n    render() {\n        return <h1>Welcome!</h1>\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport './App.css';\n\nclass Profile extends React.Component {\n    render() {\n        return (\n            <div class='profile'>\n                <h1>Profile</h1>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap/';\nimport Landing from \"./landing\";\nimport Profile from \"./profile\";\nimport \"./App.css\"\n\nclass App extends React.Component{\n  render() {\n    return (\n      <div className='App'>\n        <Header />\n        <NavBar />\n      </div>\n    );\n  }\n}\n\nfunction NavBar() {\n  return (\n    <Router>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand> My Company </Navbar.Brand>\n        <Navbar.Collapse>\n          <Nav className=\"mr-auto\" pullRight>\n            <NavLink class=\"link\" to=\"/\">Home</NavLink>\n            <NavLink class=\"link\" to=\"/profile\">Profile</NavLink>\n          </Nav>\n        </Navbar.Collapse>\n        <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-info\">Search</Button>\n        </Form>\n      </Navbar>\n\n      <Route exact path=\"/\" component={Landing} />\n      <Route path=\"/profile\" component={Profile} />\n    </Router>\n  );\n}\n\nfunction Header() {\n  return (\n    <div>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap/';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}